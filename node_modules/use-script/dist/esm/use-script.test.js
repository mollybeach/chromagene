import { __awaiter, __generator } from "tslib";
import React from 'react';
import ReactTestUtils from 'react-dom/test-utils';
import { mount, configure } from 'enzyme';
import { PromiseCompletionSource } from 'promise-completion-source';
import Adapter from 'enzyme-adapter-react-16';
import { useScript } from './use-script';
import { setTestLoadMode, loadScript } from './utils';
configure({ adapter: new Adapter() });
function renderTestComponent(deps, rendered) {
    var TestComponent = function () {
        var _a = useScript.apply(void 0, deps), loading = _a.loading, error = _a.error;
        rendered(loading, error);
        return React.createElement("div", null);
    };
    var result = mount(React.createElement(TestComponent, null));
    var testComponent = result.find(TestComponent);
    return testComponent;
}
describe('Test this module', function () {
    it('Load external script after component mounted', function () { return __awaiter(void 0, void 0, void 0, function () {
        var complete, deps, currentLoading, currentError;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    complete = new PromiseCompletionSource();
                    setTestLoadMode(function () { return complete.promise; });
                    deps = [
                        { src: '//cdn.bootcss.com/jquery/2.2.1/jquery.min.js' },
                    ];
                    currentLoading = undefined;
                    currentError = null;
                    renderTestComponent(deps, function (loading, error) {
                        currentLoading = loading;
                        currentError = error;
                    });
                    // check script tags
                    deps.forEach(function (testScript) {
                        var tag = document.querySelector("script[src='" + testScript + "']");
                        expect(tag).toBeDefined();
                    });
                    // check component props before loading
                    expect(currentLoading).toBe(true);
                    expect(currentError).toBe(null);
                    return [4 /*yield*/, ReactTestUtils.act(function () { return __awaiter(void 0, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        // Let event loop process
                                        complete.resolve();
                                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve); })];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                case 1:
                    _a.sent();
                    expect(currentLoading).toBe(false);
                    expect(currentError).toBe(null);
                    return [2 /*return*/];
            }
        });
    }); });
    it('No redundant script tag will be appended', function () { return __awaiter(void 0, void 0, void 0, function () {
        var complete, deps, currentLoading1, currentError1, currentLoading2, currentError2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    complete = new PromiseCompletionSource();
                    setTestLoadMode(function () { return complete.promise; });
                    deps = [
                        { src: '//cdn.bootcss.com/jquery/2.2.2/jquery.min.js' },
                    ];
                    currentLoading1 = undefined;
                    currentError1 = null;
                    renderTestComponent(deps, function (loading, error) {
                        currentLoading1 = loading;
                        currentError1 = error;
                    });
                    currentLoading2 = undefined;
                    currentError2 = null;
                    renderTestComponent(deps, function (loading, error) {
                        currentLoading2 = loading;
                        currentError2 = error;
                    });
                    // check script tags
                    deps.forEach(function (testScript) {
                        var tags = document.querySelectorAll("script[src='" + testScript.src + "']");
                        expect(tags.length).toEqual(1);
                    });
                    expect(currentLoading1).toBe(true);
                    expect(currentError1).toBe(null);
                    expect(currentLoading2).toBe(true);
                    expect(currentError2).toBe(null);
                    return [4 /*yield*/, ReactTestUtils.act(function () { return __awaiter(void 0, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        // Let event loop process
                                        complete.resolve();
                                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve); })];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                case 1:
                    _a.sent();
                    expect(currentLoading1).toBe(false);
                    expect(currentError1).toBe(null);
                    expect(currentLoading2).toBe(false);
                    expect(currentError2).toBe(null);
                    return [2 /*return*/];
            }
        });
    }); });
    it('Initial state is not loading when script already exists', function () { return __awaiter(void 0, void 0, void 0, function () {
        var deps, currentLoading, currentError;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    setTestLoadMode(function () { return Promise.resolve(); });
                    return [4 /*yield*/, loadScript({
                            src: '//cdn.bootcss.com/jquery/2.2.3/jquery.min.js',
                        })];
                case 1:
                    _a.sent();
                    deps = [
                        { src: '//cdn.bootcss.com/jquery/2.2.3/jquery.min.js' },
                    ];
                    currentLoading = undefined;
                    currentError = null;
                    renderTestComponent(deps, function (loading, error) {
                        currentLoading = loading;
                        currentError = error;
                    });
                    expect(currentLoading).toBe(false);
                    expect(currentError).toBe(null);
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=use-script.test.js.map