"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useScript = void 0;
var tslib_1 = require("tslib");
var react_1 = require("react");
var react_is_mounted_hook_1 = tslib_1.__importDefault(require("react-is-mounted-hook"));
var utils_1 = require("./utils");
var pendingScripts = {};
function useScript() {
    var scripts = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        scripts[_i] = arguments[_i];
    }
    var isMounted = react_is_mounted_hook_1.default();
    var _a = react_1.useState(function () {
        for (var _i = 0, scripts_1 = scripts; _i < scripts_1.length; _i++) {
            var script = scripts_1[_i];
            // Found a pending script, set initial state to true
            if (pendingScripts[script.src]) {
                return true;
            }
            // Script doesn't exist in dom, set initial state to true
            if (!utils_1.getScriptTag(script.src)) {
                return true;
            }
        }
        return false;
    }), loading = _a[0], setLoading = _a[1];
    var _b = react_1.useState(null), error = _b[0], setError = _b[1];
    react_1.useEffect(function () {
        function loadScripts() {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var _i, scripts_2, script, result;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _i = 0, scripts_2 = scripts;
                            _a.label = 1;
                        case 1:
                            if (!(_i < scripts_2.length)) return [3 /*break*/, 4];
                            script = scripts_2[_i];
                            return [4 /*yield*/, loadNewScript(script)];
                        case 2:
                            result = _a.sent();
                            if (!isMounted()) {
                                return [2 /*return*/];
                            }
                            if (!result.success) {
                                setError(result.error);
                                return [2 /*return*/];
                            }
                            _a.label = 3;
                        case 3:
                            _i++;
                            return [3 /*break*/, 1];
                        case 4:
                            setLoading(false);
                            return [2 /*return*/];
                    }
                });
            });
        }
        // No await here intentionally because hooks cannot be async functions
        loadScripts();
    }, [scripts, isMounted]);
    return { loading: loading, error: error };
}
exports.useScript = useScript;
function loadNewScript(scriptProps) {
    var runningPromise = pendingScripts[scriptProps.src];
    if (runningPromise) {
        return runningPromise;
    }
    var script = utils_1.getScriptTag(scriptProps.src);
    if (script) {
        var result = {
            element: script,
            script: script.src,
            success: true,
            error: null,
        };
        return Promise.resolve(result);
    }
    pendingScripts[scriptProps.src] = utils_1.loadScript(scriptProps).then(function (result) {
        delete pendingScripts[scriptProps.src];
        return result;
    });
    return pendingScripts[scriptProps.src];
}
//# sourceMappingURL=use-script.js.map